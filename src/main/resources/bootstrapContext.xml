<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2015 George Belden

This file is part of DecipherEngine.

DecipherEngine is free software: you can redistribute it and/or modify it under the terms	of the GNU General Public License as published by the Free Software Foundation,	either version 3 of the License, or (at your option) any later version.
	
DecipherEngine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
	
You should have received a copy of the GNU General Public License along with DecipherEngine. If not, see <http://www.gnu.org/licenses/>.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       		http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd
       		http://www.springframework.org/schema/tx 
     		http://www.springframework.org/schema/tx/spring-tx.xsd
     		http://www.springframework.org/schema/data/mongo
            http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd">

	<context:annotation-config />
	<tx:annotation-driven />

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:DecipherEngine.properties</value>
		</property>
	</bean>
	
	<import resource="classpath:beans-dao.xml" />
	<import resource="classpath:geneticAlgorithmContext.xml" />

	<mongo:mongo host="${mongodb.host}" port="${mongodb.port}" />
	<mongo:db-factory dbname="${mongodb.database}" />

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
	</bean>

	<bean class="com.ciphertool.engine.service.GeneticCipherSolutionService" id="cipherSolutionService">
		<property name="geneticAlgorithm" ref="standardGeneticAlgorithm" />
		<property name="solutionDao" ref="solutionDao" />
		<property name="commandsBefore" value="${app.commands.before}" />
		<property name="commandsAfter" value="${app.commands.after}" />
	</bean>

	<bean class="com.ciphertool.engine.common.GeneticStrategyBuilder" id="strategyBuilder">
		<property name="cipherDao" ref="cipherDao" />
		<property name="knownSolutionFitnessEvaluator" ref="cipherKeyKnownSolutionFitnessEvaluator" />
	</bean>

	<bean class="com.ciphertool.engine.controller.ZodiacCipherSolutionController" id="cipherSolutionController">
		<property name="cipherSolutionService" ref="cipherSolutionService" />
	</bean>

	<bean class="com.ciphertool.engine.view.SwingUserInterface" id="userInterface" init-method="init">
		<property name="windowTitle" value="${ui.window.title}" />
		<property name="windowWidth" value="${ui.window.width}" />
		<property name="windowHeight" value="${ui.window.height}" />
		<property name="startButtonText" value="${ui.window.startButton.text}" />
		<property name="stopButtonText" value="${ui.window.stopButton.text}" />
		<property name="cipherSolutionController" ref="cipherSolutionController" />
		<property name="cipherDao" ref="cipherDao" />
		<property name="populationInitial" value="${genetic.population.size}" />
		<property name="mutationInitial" value="${genetic.algorithm.mutationRate}" />
		<property name="maxMutationsPerIndividualInitial" value="${genetic.algorithm.maxMutationsPerChromosome}" />
		<property name="crossoverInitial" value="${genetic.algorithm.crossoverRate}" />
		<property name="generationsInitial" value="${genetic.algorithm.maxGenerations}" />
		<property name="defaultCipher" value="${cipher.name}" />
		<property name="strategyBuilder" ref="strategyBuilder" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${taskExecutor.corePoolSize}" />
		<property name="maxPoolSize" value="${taskExecutor.maxPoolSize}" />
		<!-- queueCapacity should be the same as populationSize, or we will get 
			rejected execution exceptions -->
		<property name="queueCapacity" value="${taskExecutor.queueCapacity}" />
		<!-- We want to try to avoid threads timing out during long GC pauses -->
		<property name="keepAliveSeconds" value="30" />
		<property name="allowCoreThreadTimeOut" value="true" />
	</bean>
</beans>